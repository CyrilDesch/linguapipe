linguapipe {
  runtime {
    environment = "local"
  }

  api {
    host = "0.0.0.0"
    port = 8080
  }

  # Migration and initialization settings
  migrations {
    run-on-startup = true
    fail-on-error = true
  }
  
  # Fixture settings
  fixtures {
    load-on-startup = false
  }

  # Retry configuration for resilience
  retry {
    enabled = true
    max-retries = 3
    initial-delay-ms = 100
    max-delay-ms = 5000
    backoff-factor = 2.0
  }

  jobs {
    max-attempts = 5
    poll-interval-ms = 1000
    batch-size = 5
    initial-retry-delay-ms = 2000
    max-retry-delay-ms = 60000
    backoff-factor = 2.0
  }

  # Timeout configuration in milliseconds
  timeouts {
    transcription-ms = 300000      # 5 minutes for transcription (long audio files)
    embedding-ms = 30000           # 30 seconds for embedding
    database-ms = 5000            # 5 seconds for database operations
    vector-store-ms = 10000       # 10 seconds for vector store operations
    blob-store-ms = 15000         # 15 seconds for blob storage operations
    document-parser-ms = 60000     # 1 minute for document parsing
  }

  # Declarative configuration for adapters
  adapters {
    
    driven {
      
      # Database
      # Options: postgres
      database {
        type = "postgres"
        
        postgres {
          host = "localhost"
          host = ${?DB_HOST}
          port = 5432
          database = "linguapipe"
          user = "linguapipe"
          password = "linguapipe"
          password = ${?DB_PASSWORD}
        }
      }
      
      # Vector Store
      # Options: qdrant
      vector-store {
        type = "qdrant"
        
        qdrant {
          url = "http://localhost:6333"
          url = ${?QDRANT_URL}
          api-key = ${?QDRANT_API_KEY}
          collection = "linguapipe"
        }
      }
      
      # Transcription
      # Options: whisper
      transcriber {
        type = "whisper"
        
        whisper {
          model-path = "base"
          api-url = "http://localhost:9001"
          api-url = ${?WHISPER_URL}
        }
      }
      
      
      # Embedder
      # Options: huggingface
      embedder {
        type = "huggingface"
        
        huggingface {
          model = "sentence-transformers/all-MiniLM-L6-v2"
          api-url = "http://localhost:8082"  # Text Embeddings Inference service
          api-url = ${?HUGGINGFACE_URL}
        }
      }
      
      # Blob Store
      # Options: minio
      blob-store {
        type = "minio"
        
        minio {
          endpoint = "http://localhost:9000"
          endpoint = ${?MINIO_ENDPOINT}
          access-key = "minioadmin"
          secret-key = "minioadmin"
          bucket = "linguapipe-blobs"
        }
      }

      # Job Queue
      # Options: redis
      job-queue {
        type = "redis"

        redis {
          host = "localhost"
          host = ${?REDIS_HOST}
          port = 6379
          port = ${?REDIS_PORT}
          database = 0
          password = ${?REDIS_PASSWORD}
          queue-key = "linguapipe:jobs:queue"
          dead-letter-key = "linguapipe:jobs:dead"
        }
      }
    }
    
    # Adapters Driving (Primaires)
    driving {
      
      # API Gateway
      # Options: rest, grpc
      api {
        type = "rest" 
        
        rest {
          host = "0.0.0.0"
          port = 8080
        }
        
        grpc {
          host = "0.0.0.0"
          port = 9090
        }
      }
    }
  }
}
