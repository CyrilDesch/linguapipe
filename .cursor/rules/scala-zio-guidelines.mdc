---
globs: *.scala
description: Scala and ZIO coding guidelines for SRAG
---

# Scala & ZIO Coding Guidelines

## Code Style

### General Scala

- Use `final case class` for immutable data types
- Use `sealed trait` for ADTs (sum types)
- Prefer immutability everywhere
- Use meaningful names (avoid abbreviations unless standard)
- Keep functions small and focused (single responsibility)

### ZIO Effects

- Use `ZIO[R, E, A]` type signature explicitly in public APIs
- Prefer `ZIO` over `Task` or `UIO` for clarity about requirements and errors
- Use ZIO layers (`ZLayer`) for dependency injection
- Never perform side effects outside ZIO contexts

### Error Handling

- Model errors as domain types (ADTs in `modules/domain`)
- Never catch generic `Throwable` without repackaging as domain error
- Propagate errors through layers; map to protocol errors in adapters only

## Testing

### Domain Tests

- Pure unit tests (no ZIO runtime needed)
- Test business invariants and domain rules
- Use ScalaTest or MUnit

### Application Tests

- Use ZIO Test for effect testing
- Verify orchestration logic and error handling

### Infrastructure Tests

- Test adapter implementations against port contracts
- Use separate test configuration (`application-test.conf`)

## Performance

- Adapters instantiated **once** at startup (via ZLayer)
- No runtime overhead from pattern matching (compiler optimized)
- Use `ZIO.foreach` for parallel processing
- Prefer `ZIO.collectAllPar` over sequential `traverse` when safe

## Naming Conventions

- Ports: Suffix with `Port` (e.g., `TranscriberPort`, `DbSinkPort`)
- Use cases: Suffix with `UseCase` (e.g., `IngestPipelineUseCase`)
- Adapters: Descriptive name + tech (e.g., `AssemblyAITranscriber`, `PostgresTranscriptSink`)
- Config types: Match adapter hierarchy (e.g., `DatabaseAdapterConfig`, `TranscriberConfig`)
- Domain errors: Suffix with `Error` (e.g., `TranscriptionError`, `PipelineError`)

## Dependencies

- Keep dependencies minimal in each module
- `domain`: Scala stdlib only (+ zio-prelude if needed)
- `application`: domain + zio-core
- `infrastructure`: application + all external SDKs (but isolated per adapter)

## Security

- Use environment variables for secrets: `${SECRET_KEY}`
- NEVER commit credentials in config files
- Use `.example` suffix for config templates
- Validate all external inputs at adapter boundaries
